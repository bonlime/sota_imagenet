# @package _global_

# close to exp78
# but using UFO only every other layer. should make it faster but maybe with same quality

defaults:
  - /base@_here_
  
log:
  exp_name: non-deeps_ufo_proj_ufo-0.5
  histogram: True
  print_model: True

model:
  _target_: sota_imagenet.model.CModel
  extra_kwargs:
    NonDeepBlock:
      norm: nn.BatchNorm2d
      scaled: True

  layer_config:
    - {module: pt.modules.SpaceToDepth, args: 4}
    # residual starts from the very first layer
    - {module: NonDeepBlock, args: [48, 128]}
    - {module: NonDeepBlock, args: [128, 128]}
    - {module: nn.AvgPool2d, args: [2, 2]} # os=8
    - {module: NonDeepBlock, args: [128, 256]}
    - {module: NonDeepBlock, args: [256, 256], repeat: 2}
    - {module: nn.AvgPool2d, args: [2, 2]} # os=16
    - {module: NonDeepBlock, args: [256, 384]}
    # ufo only in odd layers. 8 layers
    # - {module: NonDeepBlock, args: [384, 384], repeat: 8, kwargs: {ufo_kwargs: {residual: True, last_proj: True}}}
    - {module: NonDeepBlock, args: [384, 384], kwargs: {ufo_kwargs: {residual: True, last_proj: True}}}
    - {module: NonDeepBlock, args: [384, 384]}
    - {module: NonDeepBlock, args: [384, 384], kwargs: {ufo_kwargs: {residual: True, last_proj: True}}}
    - {module: NonDeepBlock, args: [384, 384]}
    - {module: NonDeepBlock, args: [384, 384], kwargs: {ufo_kwargs: {residual: True, last_proj: True}}}
    - {module: NonDeepBlock, args: [384, 384]}
    - {module: NonDeepBlock, args: [384, 384], kwargs: {ufo_kwargs: {residual: True, last_proj: True}}}
    - {module: NonDeepBlock, args: [384, 384]}
    - {module: pt.modules.FastGlobalAvgPool2d, kwargs: {flatten: True}}
    - {module: nn.Linear, args: [384, 2048]}
    - {module: nn.Hardswish}
    - {module: nn.Linear, args: [2048, 2048]}
    - {module: nn.Hardswish}
    - {module: nn.Linear, args: [2048, 1000]}

# using default SGD
optim:
  _target_: torch.optim._multi_tensor.SGD
  momentum: 0.9
  weight_decay: 3e-5
  lr: 0

# optim:
#   # in PyTorch implementation weight decay is lr * wd, so 0.1 == 1e-4 as in AdamW paper
#   _target_: src.optimizers.AdamLayerwise
#   weight_decay: 1e-2
#   betas: [0.9, 0.995]
#   lr: 0

# use label smoothing
criterion:
  smoothing: 0.1

loader:
  image_size: 224
  batch_size: 224
  blur_prob: 0.2
  gray_prob: 0.2
  color_twist_prob: 0.4
  re_prob: 0.3

val_loader:
  image_size: 288 # to test on the same resolution as timm

run:
  stages:
    # SGD requires warmup
    - {start: 0, end: 3, lr: [0.001, 0.1]}
    - {start: 3, end: 90, lr: [0.1, 0], lr_mode: cos}

  extra_callbacks:
    - _target_: sota_imagenet.callbacks.CutmixMixup
      cutmix_alpha: 1.0
      mixup_alpha: 0.2
      prob: 1.0

filter_from_wd: [gain] # filter bias and gain from wd
init_gamma: 1.7 # larger value to compensate for variance reduction after BlurPool
