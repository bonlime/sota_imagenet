# @package _global_

# config for ResNet50 close to default but with harder augs to prevent over-fit
# + apex Novograd optimizer with previous best found hyper-parameters
# lr = 0.05, wd = 0.002 (real wd ~= 1e-4)

# run2. not fused version of Novograd from apex
defaults:
  - /base@_here_

log:
  exp_name: r50_my-nov_wd-eps
  histogram: True
  print_model: True
  save_optim: True
  
model:
  _target_: pytorch_tools.models.resnet50

# use larger weight decay because of label smoothing
optim:
  # in PyTorch implementation weight decay is lr * wd, so 0.1 == 1e-4 as in AdamW paper
  # _target_: apex.optimizers.FusedNovoGrad
  _target_: src.optimizers.NovogradApex
  weight_decay: 0.002
  betas: [0.9, 0.99]
  lr: 0
  wd_eps: 0.01


criterion:
  smoothing: 0.1

loader:
  image_size: 224
  batch_size: 192
  color_twist_prob: 0.3

run:
  stages:
    - {start: 0, end: 5, lr: [0.0001, 0.05]}
    - {start: 5, end: 90, lr: [0.05, 0], lr_mode: cos}

  extra_callbacks:
    - _target_: src.callbacks.OrthoInitClb

    - _target_: src.callbacks.GradDistributionTB
      log_every: 50

  # very short period of ~3 epoch for ema: 0.9993 ** (2500 * 3) ~= 5e-3
  ema_decay: 0.9993