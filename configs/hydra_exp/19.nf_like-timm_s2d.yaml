# @package _global_

# like 18 but with my version of stem
# results are much worse while this is not faster((

defaults:
  - /base@_here_

model:
  _target_: src.model.CModel
  extra_kwargs:
    NormFreeBlockTimm: {activation: "'swish_hard'", groups_width: 64, alpha: 0.2, gamma: "${init_gamma}", attention_type: "'eca9'"}
    scaled_conv3x3: {gamma: "${init_gamma}"}
    torch.nn.SiLU: {inplace: True}

  layer_config:
    # my version of head
    - [-1, 1, "pt.modules.SpaceToDepth", 2]
    - [-1, 1, "scaled_conv3x3", [12, 128]] 
      # stage 1
    - [-1, 1, "pt.modules.BlurPool", 128]
    - [-1, 1, "NormFreeBlockTimm", [128, 256, 64]]
      # stage 2
    - [-1, 1, "pt.modules.BlurPool", 256]
    - [-1, 1, "NormFreeBlockTimm", [256, 512, 128]]
    - [-1, 1, "NormFreeBlockTimm", [512, 512, 128]]
      # stage 3
    - [-1, 1, "pt.modules.BlurPool", 512]
    - [-1, 1, "NormFreeBlockTimm", [512, 1536, 384]]
    - [-1, 5, "NormFreeBlockTimm", [1536, 1536, 384]]
      # stage 4
    - [-1, 1, "pt.modules.BlurPool", 1536]
    - [-1, 3, "NormFreeBlockTimm", [1536, 1536, 384]]
      # head
    - [-1, 1, scaled_conv1x1, [1536, 2304], {gamma: "${init_gamma}"}]
    - [-1, 1, 'torch.nn.SiLU']
    - [-1, 1, "pt.modules.FastGlobalAvgPool2d", [], {flatten: True}]
    - [-1, 1, "nn.Linear", [2304, 1000]]

log:
  exp_name: nf_like-timm
  histogram: True

# using best found optimizer so far
optim:
  _target_: pytorch_tools.optim.adamw.AdamW
  weight_decay: 5e-3
  eps: 1e-6
  lr: 0

# use label smoothing
criterion:
  smoothing: 0.1

loader:
  image_size: 224
  batch_size: 256
  blur_prob: 0.2
  gray_prob: 0.2
  color_twist_prob: 0.4
  re_prob: 0.3

val_loader:
  image_size: 288 # to test on the same resolution as timm

run:
  stages:
    # no warm-up
    - {start: 0, end: 90, lr: [0.005, 0], lr_mode: cos}

  extra_callbacks:
    - _target_: src.callbacks.CutmixMixup
      cutmix_alpha: 1.0
      mixup_alpha: 0.2
      prob: 0.5
      
filter_from_wd: [gain] # filter bias and gain from wd
init_gamma: 2 # larger value to compensate for variance reduction after BlurPool
